<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:aop="http://www.springframework.org/schema/aop"
		
		xsi:schemaLocation=
			"http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context.xsd

			http://www.springframework.org/schema/aop
			http://www.springframework.org/schema/aop/spring-aop.xsd">

<!-- PropertyPlachholderConfigurer로 로드된 resource는 ${ } 로 접근가능 -->
<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	<property name="location" value="classpath:config/jdbc.properties"/>
</bean>

<!-- DBCP (Apache Commons Database Connection) 사용 -->
<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
	<property name="driverClassName" value="${jdbc.driverClassName}"/>
	<property name="url" value="${jdbc.url}"/>
	<property name="username" value="${jdbc.username}"/>
	<property name="password" value="${jdbc.password}"/>
	<property name="initialSize" value="${jdbc.initialSize}"/>
	<property name="maxActive" value="${jdbc.maxActive}"/>
</bean>

<!-- SqlSession 인스턴스를 생성하는 SqlSessionFactory 생성. Factory Pattern 적용 :: Spring의 FactoryBean interface 구현 -->
<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
	<property name="dataSource" ref="dataSource"/>
	<property name="configLocation" value="classpath:sql/mybatis-config13.xml"/>
</bean>

<!-- SqlSessionTemplate 인스턴스 생성. Spring과 연동시 사용하는 핵심 SqlSession 구현체. Spring에서 제공하는 Transaction처리에 구조화된 SqlSession 구현체 -->
<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
	<constructor-arg ref="sqlSessionFactoryBean"/>
</bean>

<!-- Annotation 기반 wiring 할 수 있도록 component-scan 서술적 기술 -->
<context:component-scan base-package="mybatis.service.user.impl"/>

<!-- AOP 적용 : LOG를 처리하는 Aspect선언. 1.일반 Bean Definition :: POJO 기반 -->
<bean id="pojoAspect" class="mybatis.service.user.impl"/>

<!-- 2.선언적으로 Point cut / Advice 정의 :: TestAspectJ02.java(pointCut + advice 합치기(?))의 annotation과 아래를 비교 -->
<aop:config>
	<aop:aspect ref="pojoAspect">
		<aop:around pointcut="execution(* mybatis.service.user..*impl*.*(..) )" method="invoke"/>
	</aop:aspect>
</aop:config>

</beans>